makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
matrixA <- makeCacheMatrix(matrix(1:4, 2, 2))
matrixA $get()
matrixA$getInverse()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
}
cacheSolve(matrixA)
matrixB <- makeCacheMatrix(matrix(1:4, 2, ))
matrixB <- makeCacheMatrix(matrix(1:4, 2, 2))
matrixB$get()
matrixB$getInverse()
cacheSolve(matrixB)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
cacheSolve(matrixB)
matrixB$getInverse()
matrixB$get()
matrixB$get(x^2)
